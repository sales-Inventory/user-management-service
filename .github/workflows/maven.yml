# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: user-management-service ci cd flow

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  PROJECT_ID: ${{secrets.GKE_PROJECT}}
  SI_CLUSTER: sales-inventory
  SI_ZONE: us-central1-c
  DEPLOYEMENT_NAME: user-management-service
  IMAGE: user-management-service
  TAG: prod

jobs:
  setup-build-publish-deploy:
    name: Setup Build Publish Deploy
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v1
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{secrets.GKE_SA_KEY}}
          project_id: ${{secrets.GKE_PROJECT}}

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install -DskipTests

      - name: Setup Google Cloud CLI
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        with:
          service_account_key: ${{secrets.GKE_SA_KEY}}
          project_id: ${{secrets.GKE_PROJECT}}

      - name: Configure Docker
        run: gcloud --quiet auth configure-docker

      - name: Get SI Credentials
        run: gcloud container clusters get-credentials "$SI_CLUSTER" --zone "$SI_ZONE"

#      - name: Build & push Docker image
#        uses: mr-smithers-excellent/docker-build-push@v5
#        with:
#          image: janithsenanyaka/user-management-service
#          tags: latest
#          registry: docker.io
#          dockerfile: Dockerfile
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build Docker Image
        run: |-
          docker build --tag "gcr.io/$PROJECT_ID/$IMAGE:$TAG" .

      - name: Publish Docker Image to GCR
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$TAG"

      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      - name: Deploy Image to GKE cluster
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout restart deployment $DEPLOYMENT_NAME
          kubectl get services -o wide    

#      - name: deploy image to cluster
#        run: |-
#           kubectl apply -f deployment.yaml
#           kubectl rollout restart deployment user-management-service

              



